===================
INSTALL ANGULAR CLI
===================

npm install -g @angular/cli

===================
CHECK VERSION
===================

ng --version

===================
HELP
===================

ng help

===================
CREATING A NEW PROJ
===================

ng new my-first-app

ng serve --port 3000 
        or
ng serve --open


=====================
GENERATING COMPONENTS
=====================
ng generate component <component-name>

=====================
GENERATING COMPONENTS IN A DIFFERENT FOLDER
=====================
ng generate component components/about


===================
GENERATING A MODULE
===================
ng generate module <name>


==============================
CREATE A COMPONENT IN A MODULE
==============================

ng generate module movies
cd movies
ng generate component movieList //for automatic registration to the new MoviesModule

==============================
IMPORT MODULE IN THE AppModule
==============================

import { MoviesModule } from './movies/movies.module'

@NgModule({
    imports: [MoviesModule]
})

==============================================
CREATE A COMPONENT AND REGISTER IT TO A MODULE
==============================================

ng generate component movies --module=app.module.ts //In this case the AppModule


=================================
SENDING DATA FROM PARENT TO CHILD
=================================

@Input <name-of-input-to-bind>


=================================
SENDING DATA FROM CHILD TO PARENT
=================================
Eg. If you want to hide a post

-----------------IN THE CHILD COMPONENT CLASS-----------------
@Input() post: Post;

@Output() hidePost: Post;

//function to emit event to parent
emit_event():void{
    this.hidePost.emit(<name>)
}
-----------------IN THE CHILD COMPONENT CLASS-----------------


-----------------IN THE CHILD TEMPLATE-----------------
<button (click)="hide(post)"></button>
-----------------IN THE CHILD TEMPLATE-----------------


-----------------IN THE PARENT TEMPLATE-----------------
<app-post (hidePost)="hidePost($event)"></app-post>
-----------------IN THE PARENT TEMPLATE-----------------


-----------------IN THE PARENT COMPONENT CLASS-----------------
//assuming we have a post array containing all posts that have been initialized in ngOnInit

hidePost(post: Post){
    this.post = this.post.filter(p=> p.id !== post.id)
}
-----------------IN THE PARENT COMPONENT CLASS-----------------

==========
NAVIGATION
==========
The Angular Router allows us to set up navigation in a single-page application. Generally, it involves three steps:

1. Creating the AppRoutingModule
2. Defining and configuring Route objects
3. Adding routerLink directives to anchor tags in templates


--------------------------- The App Routing Module --------------------

************************ app.module.ts (generated)  ***********************

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

************************ app.module.ts (generated)  ***********************



************************ app-routing-module.ts (generated) ************************

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
import { ContactComponent } from './components/contact/contact.component';
import { LibrariesComponent } from './components/pages/libraries/libraries.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'contact', component: ContactComponent },
  { path: 'libraries/:id', component: LibrariesComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

************************ app-routing-module.ts (generated) ************************

--------------------------- The App Routing Module --------------------


--------------------------- Rendering Components --------------------

************** app.component.html (generated) **************
<app-header></app-header>

<router-outlet></router-outlet>
************** app.component.html (generated) **************

-------------------------- Setting Up Hyperlinks --------------------

************** navigation.component.html **************

<!-- navigation.component.html -->

<h1>Library Directory</h1>

<nav>
  <a routerLink="/">Home</a>
  <a routerLink="/contact">Contact us</a>
</nav>

************** navigation.component.html **************

-------------------------- Setting Up Hyperlinks --------------------


-------------------------- Dynamic Routing --------------------

************** libraries.component.html **************

<a routerLink="libraries/{{ library.id }}"> More Details </a>

************** libraries.component.html **************

-------------------------- Dynamic Routing --------------------



==================
GENERATE A SERVICE
==================

ng generate service country

************** country.service.ts **************
// country.service.ts (updated)

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class CountryService {

  constructor() { }

  getCountries() {
    return [
      {
        name: 'Spain',
        population: 46754778
      },
      {
        name: 'New Zealand',
        population: 4822233
      },
      {
        name: 'United States of America',
        population: 331002651
      }
    ];
  }
}

************** country.service.ts **************

-------------------------- Injecting the Service --------------------------

************** countries.component.ts **************

// countries.component.ts (updated)

import { Component, OnInit } from '@angular/core';
import { CountryService } from '../country.service';

@Component({
  selector: 'app-countries',
  templateUrl: './countries.component.html',
  styleUrls: ['./countries.component.css']
})
export class CountriesComponent implements OnInit {
  countriesList: object[] = [];

  constructor(private countryService: CountryService) { }

  ngOnInit(): void {
    this.countriesList = this.countryService.getCountries();
  }

}

************** countries.component.ts **************


================================
INSTALLING THIRD-PARTY LIBRARIES
================================

// Installing Bootstrap

ng add @ng-bootstrap/ng-bootstrap

===========
OBSERVABLES
===========
import { Observable } from 'rxjs';


Angular provides an implementation of observables via the Observable class in the RxJS Library, short for "Reactive Extensions for JavaScript." 
We'll mostly take advantage of its ability to help us create observables that are fundamental to Angular's HTTP client.


Docs -> https://rxjs-dev.firebaseapp.com/guide/overview


===========
HTTP CLIENT
===========

1. Import the 'HTTPClientModule' from '@angular/common/http' into the AppModule to gain access to the HTTP client
        import { HttpClientModule } from '@angular/common/http';

2. Import the 'HTTPClient' from '@angular/common/http' into the AppModule to allow us to make requests.



-------------------------- GETTING DATA FROM jsonplaceholder library --------------------------

************** app.module.ts **************


import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    ...
  ],
  imports: [
    ...
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

************** app.module.ts **************

import { Injectable } from '@angular/core';
import { Post } from '../models/Post';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class PostService {

  constructor(private http: HttpClient) { }

  getPosts() {
    return this.http.get<Post[]>("https://jsonplaceholder.typicode.com/posts?_limit=8");
  }
}

************** post.service.ts **************

-------------------------- GETTING DATA FROM jsonplaceholder library --------------------------


-------------------------- CREATING HTTP SERVICE --------------------------

************** http.service.ts **************

import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class HttpService {

  constructor(private http: HttpClient) { }

  getComments(): Observable<[]> {
    return this.http.get<[]>('https://jsonplaceholder.typicode.com/comments');
  }

  getUsers(): Observable<[]> {
    return this.http.get<[]>('https://jsonplaceholder.typicode.com/users');
  }
}

************** http.service.ts **************

-------------------------- CREATING HTTP SERVICE --------------------------


-------------------------- SUBSCRIBING TO A RETURN VALUE -------------------------- 

************** comments.component.ts ************** 

import { Component, OnInit } from '@angular/core';
import { HttpService } from '../http.service';

@Component({
  selector: 'app-users',
  templateUrl: './comments.component.html',
  styleUrls: ['./comments.component.css']
})
export class CommentsComponent implements OnInit {
  comments: [];

  constructor(private httpService: HttpService) { }

  ngOnInit(): void {
    this.httpService.getComments().subscribe(data => {
      this.comments = data;
    });
  }
}

************** comments.component.ts ************** 




************** users.component.ts **************

import { Component, OnInit } from '@angular/core';
import { HttpService } from '../http.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {
  users: [];

  constructor(private httpService: HttpService) { }

  ngOnInit(): void {
    this.httpService.getUsers().subscribe(data => {
      this.users = data;
    });
  }
}

************** users.component.ts **************

************** users.component.html **************
<h1>User List</h1>
<ul>
  <li *ngFor="let user of users">
    {{user.name}}
  </li>
</ul>

************** users.component.html **************

-------------------------- SUBSCRIBING TO A RETURN VALUE -------------------------- 


FURTHER READING
_______________

    a) HttpClient in the official Angular documentation 
        -> https://angular.io/api/common/http/HttpClient

    b) Get data from a server from the official Angular documentation
        -> https://angular.io/tutorial/toh-pt6#get-data-from-a-server

    c) JSONPlaceholder, a free REST API for testing and prototyping
        -> https://jsonplaceholder.typicode.com/

    d) 3 Methods for Reading Local JSON Files in Angular
        -> https://www.techiediaries.com/angular-local-json-files/
        


====================
FORMS AND USER INPUT
====================

Building a form with two-way binding can generally be done in three steps:

1. Import the FormsModule from @angular/forms
    -> import { FormsModule } from '@angular/forms';

2. Create properties in the component class through which user input will be bound.

3. Create the form elements in the component's HTML template, each leveraging the ngModel attribute directive.


SAMPLE CODE BELOW TO ILLUSTRATE CREATING A BLOG

************** app.module.ts **************

import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    ...
  ],
  imports: [
    ...
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})

export class AppModule { }

************** app.module.ts **************


************** create-blog.component.ts ************** 

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-create-blog',
  templateUrl: './create-blog.component.html',
  styleUrls: ['./create-blog.component.css']
})
export class CreateBlogComponent implements OnInit {
  title: string = '';
  blogContent: string = '';
  public: boolean = false;

  constructor() { }

  ngOnInit(): void {
  }

  onSubmit(): void {
    // Your submit logic here (e.g., making an API call that sends form data)
  }

}

************** create-blog.component.ts ************** 


************** create-blog.component.html **************

<!-- create-blog.component.html -->

<h1>Create a blog post</h1>

<form (ngSubmit)="onSubmit()">
  <label>Blog title</label>
  <input type="text" name="title" [(ngModel)]="title">

  <label>Blog content</label>
  <textarea name="blogContent" [(ngModel)]="blogContent"></textarea>

  <label>Post blog publicly?</label>
  <input type="checkbox" [(ngModel)]="public" (change)="public = !public">

  <button type="submit">Submit</button>
</form>

************** create-blog.component.html **************


Further Reading
_______________

    Two-way binding from the official Angular documentation
        -> https://angular.io/guide/two-way-binding

    Building a template-driven form from the official Angular documentation
        -> https://angular.io/guide/forms

    ngModel from the official Angular documentation
        -> https://angular.io/api/forms/NgModel

    FormsModule from the official Angular documentation
        -> https://angular.io/api/forms/FormsModule

    Listening for form submission from the official Angular documentation
        -> https://angular.io/api/forms/NgForm#listening-for-form-submission

    Reactive forms from the official Angular documentation
        -> https://angular.io/guide/reactive-forms

    Navigate to a different page 
        -> https://angular.io/guide/router#specifying-a-relative-route



====================
FORMS AND USER INPUT
====================
To validate the values of input fields in the form, we use Angular's built-in validators, which are attributes we place directly on form elements. For example, some common validators you might use include:
        - required  :   which requires that the input value is non-empty
        - minlength :   which requires that the length of the input value is greater than or equal to the provided length
        - maxlength :   which requires that the length of the input value is less than or equal to the provided length

For a full list of validators, check out Validators in the Angular documentation.
    -> https://angular.io/api/forms/Validators


************** create-blog.component.html (updated) **************



<form #form="ngForm" (ngSubmit)="onSubmit()">
  <label>Blog title</label>
  <input 
    type="text" 
    name="title" 
    required 
    minlength="6" 
    [(ngModel)]="title" 
    #blogTitle="ngModel">

  <label>Blog content</label>
  <textarea name="blogContent" [(ngModel)]="blogContent"></textarea>

  <label>Post blog publicly?</label>
  <input type="checkbox" [(ngModel)]="public" (change)="public = !public">

  <button type="submit">Submit</button>
    
<!-- DISABLING THE SUBMIT BUTTON -->
  <button type="submit" [disabled]="form.invalid">Disabled Submit</button>
<!-- DISABLING THE SUBMIT BUTTON -->
</form>

<!-- ERROR HANDLING -->

<div *ngIf="blogTitle.invalid && blogTitle.dirty">
  <div *ngIf="blogTitle.errors.required">
    Please provide a title for your blog post.
  </div>
  <div *ngIf="blogTitle.errors.minlength">
    The title of the blog must contain at least 6 characters.
  </div>
</div>

************** create-blog.component.html (updated) **************

===============
IMPORTANT LINKS
===============
LIFECYCLE EVENT SEQUENCE
    https://angular.io/guide/lifecycle-hooks#lifecycle-event-sequence

PROPERTY BINDING BEST PRACTICES
    https://angular.io/guide/property-binding-best-practices

ANGULAR DIRECTIVES
    https://angular.io/api/common#directives

CLASS BINDING
    https://angular.io/guide/class-binding

EVENT BINDING
    Native DOM events from MDN -> https://developer.mozilla.org/en-US/docs/Web/Events

    Event binding from the official Angular documentation -> https://angular.io/guide/event-binding

    How event binding works from the official Angular documentation -> https://angular.io/guide/event-binding-concepts


=========
LIBRARIES
=========

Bootstrap -> https://ng-bootstrap.github.io/

Material UI -> https://material.angular.io/

Flex-Layout -> https://github.com/angular/flex-layout  
        Docs - https://github.com/angular/flex-layout/wiki/Declarative-API-Overview

Lodash -> https://lodash.com/

UIKIT -> https://colinstodd.com/posts/code/how-to-add-uikit-to-angular.html